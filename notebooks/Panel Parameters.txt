#Panel Parameters
num_panels = 9 #Total Number of Panels
A_panel = [0.925, 2.6429, 2.6429, 2.6429, 2.6429, 2.6429, 2.6429 ,2.6429, 0.925] #Area of Panels (Ordered Left to Right: 1, 2, 3, 4, 5, 6, 7, 8, 9) [m^2]

SL_panel = [-2.1023, 0, 0, 0, 0, 0, 0, 0, -2.1023] #Stationline from Center of Gravity (Ordered Left to Right: 1, 2, 3, 4, 5, 6, 7, 8, 9) [m]
BL_panel = [-4.4, -4.4, -2.9333, -1.4667, 0, 1.4667, 2.9333, 4.4, 4.4] #Buttline from Center of Gravity (Ordered Left to Right: 1, 2, 3, 4, 5, 6, 7, 8, 9) [m]
WL_panel = [0, 0, -1.2536, -1.5856, -1.6818, -1.5856, -1.2536, 0, 0] #Waterline from Center of Gravity (Ordered Left to Right: 1, 2, 3, 4, 5, 6, 7, 8, 9) [m]

phi_panel = [-1.5708, -0.7854, -0.5236, -0.2618, 0, 0.2618, 0.5236, 0.7854, 1.5708] #Phi Angle [rad]
theta_panel = [0, 0, 0, 0, 0, 0, 0, 0, 0] #Theta Angle [rad]

CL0 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 
CLDELTA = [0.0, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.0] 
CLDELTA3 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 
CLA = [3.9927, 5.2029, 5.2029, 5.2029, 5.2029, 5.2029, 5.2029, 5.2029, 3.9927]
CD0 = [0.018, 0.018, 0.018, 0.018, 0.018, 0.018, 0.018, 0.018, 0.018]
CDA2 = [1.6891, 1.6891, 1.6891, 1.6891, 1.6891, 1.6891, 1.6891, 1.6891, 1.6891]
CDDELTA = [0.0, 0.063949, 0.063949, 0.063949, 0.063949, 0.063949, 0.063949, 0.063949, 0.0]
CDDELTA3 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

def compute_aerodynamic_velocity(state, i):
    uG, vG, wG = state['uG'], state['vG'], state['wG'] #Translation Velocities from Current State
    pP, qP, rP = state['pP'], state['qP'], state['rP']
    r_PMP = np.array([x_pmp, y_pmp, z_pmp]) #Position Vector from Parafoil Center of Gravity to the Apparent Mass Center

    if i != -1: 
        rCG_panel = np.array([SL_panel[i], BL_panel[i], WL_panel[i]]) #Position Vector from the Center of Gravity to the ith Panel

    rMp_panel = rCG_panel - r_PMP #Position Vector from Apparent Mass Center to the ith panel
    omega_PI = np.array([pP, qP, rP]) #Angular Velocity of Parafoil with Respect to Intertial Frame
    skew_omega_PI = skew(omega_PI)
    aero_velocity = np.array([uG, vG, wG]) + skew_omega_PI @ rMp_panel #EQUATION 28

    return aero_velocity